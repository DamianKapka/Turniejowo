using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;
using System.Threading.Tasks;
using Turniejowo.API.Exceptions;
using Turniejowo.API.Helpers.Manager;
using Turniejowo.API.Models;
using Turniejowo.API.Repositories;
using Turniejowo.API.UnitOfWork;

namespace Turniejowo.API.Services
{
    public class MatchService : IMatchService
    {
        private readonly IMatchRepository matchRepository;
        private readonly ITeamRepository teamRepository;
        private readonly IPointsRepository pointsRepository;
        private readonly ITournamentRepository tournamentRepository;
        private readonly IUnitOfWork unitOfWork;
        private readonly IBracketManager bracketManager;

        public MatchService(IMatchRepository matchRepository, ITeamRepository teamRepository, IPointsRepository pointsRepository, IUnitOfWork unitOfWork, ITournamentRepository tournamentRepository, IBracketManager bracketManager)
        {
            this.matchRepository = matchRepository;
            this.teamRepository = teamRepository;
            this.pointsRepository = pointsRepository;
            this.unitOfWork = unitOfWork;
            this.tournamentRepository = tournamentRepository;
            this.bracketManager = bracketManager;
        }

        public async Task<ICollection<Match>> GetAllMatchesAsync()
        {
            var matches = await matchRepository.GetAllAsync(new string[]{"HomeTeam","GuestTeam"});

            if (matches.Count == 0)
            {
                throw new NotFoundInDatabaseException();
            }

            return matches;
        }

        public async Task<Match> GetMatchByIdAsync(int id)
        {
            var match = await matchRepository.FindSingleAsync(m => m.MatchId == id,new string[]{"HomeTeam","GuestTeam"})
                        ?? throw new NotFoundInDatabaseException();

            if (match == null)
            {
                throw new NotFoundInDatabaseException();
            }

            return match;
        }

        public async Task<ICollection<Points>> GetPointsForMatch(int matchId)
        {
            var match = await matchRepository.FindSingleAsync(m => m.MatchId == matchId)
                        ?? throw new NotFoundInDatabaseException();

            var points = await pointsRepository.FindAsync(p => p.MatchId == matchId, new string[] { "Tournament", "Player", "Match" });

            return points;
        }

        public async Task AddNewMatchAsync(Match match, bool autoGenerated = false)
        {
            if (!autoGenerated)
            {
                var teamA = await teamRepository.FindSingleAsync(x => x.TeamId == match.HomeTeamId);
                var teamB = await teamRepository.FindSingleAsync(y => y.TeamId == match.GuestTeamId);

                if (teamA == null ||
                    teamB == null)
                {
                    throw new NotFoundInDatabaseException();
                }

                var matches = await matchRepository.FindAsync(m => m.MatchDateTime == match.MatchDateTime);

                var isAnyTeamAlreadyPlaying = matches.Select(y => new[] { y.HomeTeamId, y.GuestTeamId }).Any(o => o.Contains(match.HomeTeamId) || o.Contains(match.GuestTeamId));

                if (isAnyTeamAlreadyPlaying)
                {
                    throw new AlreadyInDatabaseException();
                }

                if (teamA.TournamentId != teamB.TournamentId)
                {
                    throw new ArgumentException();
                }

                var tournament = await tournamentRepository.FindSingleAsync(t => t.TournamentId == teamA.TournamentId);

                if (tournament.IsBracket)
                {
                    if (match.IsFinished && (match.GuestTeamPoints == match.HomeTeamPoints))
                    {
                        throw new AmbiguousMatchException();
                    }

                    var matchesBracket =
                        await matchRepository.FindAsync(m =>
                            m.HomeTeam.TournamentId == tournament.TournamentId &&
                            m.GuestTeam.TournamentId == tournament.TournamentId);

                    var isTeamAlreadyPlayingInBracket = matchesBracket.Select(y => new[] { y.HomeTeamId, y.GuestTeamId }).Any(o => o.Contains(match.HomeTeamId) || o.Contains(match.GuestTeamId));

                    if (isTeamAlreadyPlayingInBracket)
                    {
                        throw new ConstraintException();
                    }

                    if (matchesBracket.Count(m => m.BracketIndex <= tournament.AmountOfTeams / 2) == tournament.AmountOfTeams / 2)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    int bracketIndexForMatch = await bracketManager.FindFirstEmptyBracketSlotAsync(matchesBracket, tournament.AmountOfTeams);
                    match.BracketIndex = bracketIndexForMatch;
                } 
            }

            matchRepository.Add(match);
            await unitOfWork.CompleteAsync();
        }

        public async Task EditMatchAsync(Match match)
        {
            var matchToEdit = await matchRepository.FindSingleAsync(x => x.MatchId == match.MatchId) ?? throw new NotFoundInDatabaseException(); ;

            // TODO : TESTY
            if (match.BracketIndex != 0)
            {
                if (match.GuestTeamPoints == match.HomeTeamPoints)
                {
                    throw new ArgumentException();
                }

                if (await IsMatchHavingAParentMatchInBracketAsync(matchToEdit))
                {
                    throw new AmbiguousMatchException();
                }

                await AddAutoGeneratedBracketMatch(match);
            }

            matchRepository.ClearEntryState(matchToEdit);
            matchRepository.Update(match);

            await unitOfWork.CompleteAsync();
        }

        public async Task DeleteMatchAsync(int id)
        {
            var matchToDel = await matchRepository.FindSingleAsync(x => x.MatchId == id) ?? throw new NotFoundInDatabaseException();

            //TODO : TESTY
            if (matchToDel.BracketIndex != 0)
            {
                if (await IsMatchHavingAParentMatchInBracketAsync(matchToDel))
                {
                    throw new AmbiguousMatchException();
                }
            }

            matchRepository.Delete(matchToDel);
            await unitOfWork.CompleteAsync();
        }

        public async Task DeleteMatchesRelatedToTheTeamAsync(int id)
        {
            var matches = await matchRepository.FindAsync(m => m.GuestTeamId == id || m.HomeTeamId == id);

            foreach (var match in matches)
            {
                await DeleteMatchAsync(match.MatchId);
            }

            await unitOfWork.CompleteAsync();
        }

        private async Task AddAutoGeneratedBracketMatch(Match match)
        {
            var team = await teamRepository.FindSingleAsync(t => t.TeamId == match.HomeTeamId);
            var tournament = await tournamentRepository.FindSingleAsync(t => t.TournamentId == team.TournamentId);

            var matchesBracket =
                await matchRepository.FindAsync(m =>
                    m.HomeTeam.TournamentId == tournament.TournamentId &&
                    m.GuestTeam.TournamentId == tournament.TournamentId);

            var correspondingBracketMatch = match.BracketIndex % 2 == 0 ? matchesBracket.FirstOrDefault(m => m.BracketIndex == match.BracketIndex - 1) 
                : matchesBracket.FirstOrDefault(m => m.BracketIndex == match.BracketIndex + 1);

            if (correspondingBracketMatch != null && correspondingBracketMatch.IsFinished)
            {
                var generatedMatch = await bracketManager.AutoGenerateBracketMatchAsync(correspondingBracketMatch,match,tournament.AmountOfTeams);

                if(generatedMatch != null)
                {
                    await AddNewMatchAsync(generatedMatch, true);
                }
            }

            matchRepository.ClearEntryState(match);
        }

        private async Task<bool> IsMatchHavingAParentMatchInBracketAsync(Match match)
        {
            var team = await teamRepository.FindSingleAsync(t => t.TeamId == match.GuestTeamId) ?? throw new ArgumentException();

            var tournament = await teamRepository.FindSingleAsync(t => t.TournamentId == team.TournamentId) ?? throw new ArgumentException();

            var matchesBracket =
                await matchRepository.FindAsync(m =>
                    m.HomeTeam.TournamentId == tournament.TournamentId &&
                    m.GuestTeam.TournamentId == tournament.TournamentId);

            var isTeamPlayingLaterInTheTournament = matchesBracket.Select(y => new[] { y.HomeTeamId, y.GuestTeamId, y.BracketIndex })
                .Any(o => (o.Contains(match.HomeTeamId) || o.Contains(match.GuestTeamId)) && o[2] > match.BracketIndex);

            return isTeamPlayingLaterInTheTournament;
        }
    }
}
